package net.violet.voos.message;
option java_package = "net.violet.voos.message";
option java_outer_classname = "MessageManager";
message VoosMsg {
  required string id = 1;
  optional string correlationId = 2;
  optional string interactiveId = 3;
  optional string recipient = 4;
  optional Ears ears = 101;
  optional Led led = 102;
  optional Asr asr = 103;
  optional Tts tts = 104;
  optional Multimedia multimedia = 105;
  optional Webcam webcam = 106;
  optional Choreography choreography = 107;
  optional K2k k2k = 108;
  optional Serial serial = 109;
  optional Response response = 200;
  optional InteractiveMode interactiveMode = 201;
  optional Event event = 202;
  optional WebcamDirectResponse webcamDirectResponse = 203;
  optional AsrCallback asrCallback = 300;
  optional ButtonCallback buttonCallback = 301;
  optional EarsCallback earsCallback = 302;
  optional RfidCallback rfidCallback = 303;
  optional MultimediaCallback multimediaCallback = 304;
  optional K2kCallback k2kCallback = 305;
  optional ScheduleEvent scheduleEvent = 306;
  optional SerialCallback serialCallback = 307;
  optional AuthenticationToken authenticationToken = 400;
  optional AuthenticationResponse authenticationResponse = 401;
  optional RunApplication runApplication = 500;
  optional RunApplicationResponse runApplicationResponse = 501;
  optional Config config = 600;
  optional ConfigApp configApp = 601;
  optional ConfigResponse configResponse = 602;
  optional System system = 610;
  optional ScheduleConf scheduleConfig = 650;
  optional ContactList contactList = 660;
  optional GetContactList getcontactList = 661;
  optional bool pendingmessage = 662;
  optional KarotzMessageQuery karotzMessageQuery = 700;
  optional KarotzMessageResponse karotzMessageResponse = 701;
  optional Ping ping = 1000;
  optional KarotzInfoQuery karotzinfo_query = 1001;
  optional KarotzInfoResponse karotzinfo_response = 1002;
  optional SocialQuery socialQuery = 1100;
  optional Social social = 1101;
  optional ServerQuery serverQuery = 2000;
}
message InteractiveMode {
  optional Action action = 1;
  optional string interactiveId = 2;
  optional sint32 ttl = 3;
  optional string configId = 10;
  repeated string access = 11;
  enum Action {
    START = 1;
    STOP = 2;
  }
}
message Ears {
  optional sint32 left = 1;
  optional sint32 right = 2;
  optional bool relative = 3;
  optional bool reset = 4;
}
message Led {
  optional Pulse pulse = 2;
  optional Fade fade = 3;
  optional Light light = 4;
  message Pulse {
    required string color = 1;
    required int32 period = 2;
    required int32 pulse = 3;
  }
  message Fade {
    required string color = 1;
    required int32 period = 2;
  }
  message Light {
    optional string color = 1;
  }
}
message Asr {
  repeated string dictionary = 1;
  optional string file = 2;
  optional string lang = 3;
}
message Tts {
  required Type action = 1;
  optional string text = 2;
  optional string lang = 3;
  enum Type {
    START = 1;
    STOP = 2;
  }
}
message Multimedia {
  optional Play play = 1;
  optional Pause pause = 2;
  optional Resume resume = 3;
  optional Stop stop = 4;
  optional Record record = 5;
  optional Next next = 6;
  optional Previous previous = 7;
  optional Getartist getartist = 100;
  optional Getfolder getfolder = 102;
  optional Getplaylist getplaylist = 103;
  optional Getgenre getgenre = 104;
  optional Getsong getsong = 105;
  repeated string artistlist = 150;
  repeated string folderlist = 151;
  repeated string playlistlist = 152;
  repeated string genrelist = 153;
  repeated string songlist = 154;
  message Play {
    required string url = 1;
  }
  message Pause {
  }
  message Resume {
  }
  message Next {
  }
  message Previous {
  }
  message Stop {
  }
  message Record {
    required string url = 1;
  }
  message Getartist {
  }
  message Getfolder {
  }
  message Getplaylist {
  }
  message Getgenre {
  }
  message Getsong {
  }
}
message Webcam {
  required string photo = 1;
}
message Choreography {
  optional string start = 1;
  optional string start_file = 2;
  optional bool stop = 3;
}
message Serial {
  optional Open open = 1;
  optional Write write = 2;
  optional Close close = 3;
  message Open {
    required string port = 1;
    required int32 baud = 2;
  }
  message Write {
    required string port = 1;
    required string data = 2;
    optional string base = 3;
  }
  message Close {
    optional string port = 1;
  }
}
message SerialCallback {
  optional Readline readline = 1;
  message Readline {
    required string port = 1;
    required string data = 2;
    optional string base = 3;
  }
}
message Response {
  optional VReturnCode code = 1;
  optional string description = 2;
}
message WebcamDirectResponse {
  optional VReturnCode code = 1;
  optional bytes data = 2;
}
message AsrCallback {
  repeated Recognition recognition = 1;
  message Recognition {
    required string text = 1;
    required int32 confident = 2;
    optional string semantic = 3;
  }
}
message ButtonCallback {
  required Type type = 1;
  enum Type {
    SIMPLE = 1;
    DOUBLE = 2;
    TRIPLE = 3;
    MULTIPLE = 4;
    LONG_START = 5;
    LONG_STOP = 6;
  }
}
message EarsCallback {
  required Type type = 1;
  optional int32 step = 2;
  optional int32 length = 3;
  enum Type {
    START_LEFT = 1;
    START_RIGHT = 2;
    STOP_LEFT = 3;
    STOP_RIGHT = 4;
    BLOCKED_LEFT = 5;
    BLOCKED_RIGHT = 6;
  }
}
message RfidCallback {
  required string id = 1;
  optional bytes content = 2;
  optional Dir direction = 3;
  optional int32 app = 4;
  optional Type type = 5;
  optional int32 pict = 6;
  optional Col color = 7;
  enum Dir {
    IN = 1;
    OUT = 2;
  }
  enum Col {
    NONE_COL = 0;
    RED = 1;
    BLUE = 2;
    GREEN = 3;
    YELLOW = 4;
    PINK = 5;
    BLACK = 6;
    GREY = 7;
    ORANGE = 8;
    PURPLE = 9;
    WHITE = 10;
    DARK_RED = 11;
    DARK_BLUE = 12;
    DARK_GREEN = 13;
    DARK_YELLOW = 14;
    BROWN = 16;
  }
  enum Type {
    NONE_TYPE = 0;
    FLAT = 1;
    NANOZTAG = 2;
    ZTAMPS = 3;
    DRESS = 4;
    BOOKZ = 5;
  }
}
message MultimediaCallback {
  required TypeAction action = 1;
  enum TypeAction {
    PLAY = 1;
    STOP = 2;
    PAUSE = 3;
    RESUME = 4;
    MUSIC_UPDATE = 5;
  }
}
message AuthenticationToken {
  required string token = 1;
}
message AuthenticationResponse {
  required string login = 1;
  required string authentication = 2;
}
message Event {
  required VReturnCode code = 1;
  optional string description = 2;
}
message RunApplication {
  required string apiKey = 1;
}
message RunApplicationResponse {
  required VReturnCode code = 1;
  optional int32 pid = 2;
}
message Ping {
}
message System {
  required CommandType command = 1;
  repeated KeyValue params = 2;
}
message ConfigResponse {
  optional ConfigInstance config = 101;
}
message KeyValue {
  required string key = 1;
  required string value = 2;
}
message ConfigInstance {
  optional bool interruptible = 10;
  optional bool awake = 11;
  optional string rfid = 12;
  required string name = 13;
  optional string uuid = 14;
  optional string accessToken = 15;
  repeated KeyValue params = 100;
}
message ConfigApp {
  required string apiKey = 1;
  required string version = 2;
  required string name = 3;
  required string deployment = 4;
  optional string callback = 5;
  optional string author = 6;
  repeated string access = 10;
  repeated KeyValue parameters = 11;
  repeated ConfigInstance configInstance = 100;
}
message Config {
  repeated ConfigApp configapp = 1;
  optional string lang = 10;
  optional SipInfo sipInfo = 20;
  optional Social social = 21;
  message SipInfo {
    required string id = 1;
    optional string password = 2;
    optional string domain = 3;
    optional string stun = 4;
  }
}
message KarotzInfoResponse {
  repeated KeyValue infos = 1;
}
message KarotzInfoQuery {
}
message ScheduleConf {
  repeated ScheduleApp scheduleApp = 1;
  repeated ScheduleCallback scheduleCallback = 2;
  repeated ScheduleWakeup scheduleWakeup = 3;
  optional bool reset = 10 [default = false];
  optional uint64 time = 11;
  optional string gmt = 12;
  message Schedule {
    optional SchedulePeriodic schedulePeriodic = 1;
    optional ScheduleWeekly scheduleWeekly = 2;
    optional ScheduleDate scheduleDate = 3;
    message SchedulePeriodic {
      required int32 period = 1;
      optional int32 delta = 2 [default = 0];
    }
    message ScheduleWeekly {
      required int32 dayWeek = 1;
      required int32 hour = 2;
      required int32 minute = 3;
      optional int32 second = 4 [default = 0];
    }
    message ScheduleDate {
      optional int32 year = 1 [default = -1];
      optional int32 month = 2 [default = -1];
      optional int32 day = 3 [default = -1];
      optional int32 hour = 4 [default = -1];
      required int32 minute = 5;
      optional int32 second = 6 [default = 0];
    }
  }
  message ScheduleApp {
    required string apiKey = 1;
    optional string instance = 2;
    required Schedule schedule = 10;
  }
  message ScheduleCallback {
    required Schedule schedule = 1;
  }
  message ScheduleWakeup {
    required int32 dayweek = 1;
    required int32 wakeuphour = 2;
    required int32 wakeupminute = 3;
    required int32 sleephour = 4;
    required int32 sleepminute = 5;
  }
}
message Contact {
  optional string firstname = 1;
  optional string lastname = 2;
  repeated Object objects = 3;
  optional string alias = 4;
  optional string uuid = 5;
  message Object {
    required string idDB = 1;
    optional string name = 2;
  }
}
message ContactList {
  repeated Contact contacts = 1;
}
message GetContactList {
}
message K2k {
  optional Call call = 1;
  optional Answer answer = 2;
  optional Hangup hangup = 3;
  optional Account account = 4;
  message Call {
    required string address = 1;
  }
  message Answer {
    required bool accept = 1;
  }
  message Hangup {
  }
  message Account {
    required string sipId = 1;
    required string sipDomain = 2;
    required string sipPassword = 3;
    required string stunServer = 4;
  }
}
message K2kCallback {
  required Type type = 1;
  required string correspondant = 2;
  enum Type {
    INCOMING = 0;
    BEGINNING = 1;
    TERMINATED = 2;
  }
}
message KarotzMessageHeader {
  optional string id = 1;
  optional int32 date = 2;
  optional Status status = 3;
  optional Contact from = 4;
  required Contact to = 5;
  enum Status {
    UNREAD = 0;
    READ = 1;
  }
}
message KarotzMessageContent {
  required Type type = 1;
  optional string header = 2;
  required string content = 3;
  enum Type {
    TEXT = 0;
    SOUND = 1;
    XML = 2;
    MIXED = 3;
  }
}
message KarotzMessageQuery {
  required TypeAction action = 1;
  repeated string id = 2;
  optional KarotzMessage message = 3;
  enum TypeAction {
    NEW = 1;
    LIST = 2;
    GET = 3;
    DELETE = 4;
    READ = 5;
  }
}
message KarotzMessage {
  required KarotzMessageHeader header = 1;
  optional KarotzMessageContent content = 2;
}
message KarotzMessageResponse {
  repeated KarotzMessage karotzMessageList = 1;
}
message ScheduleEvent {
  required string uuid = 1;
  optional string params = 2;
}
message SocialQuery {
}
message Social {
  optional string twitterConsumerKey = 10;
  optional string twitterConsumerSecret = 11;
  optional string twitterToken = 12;
  optional string twitterTokenSecret = 13;
  optional string facebookToken = 20;
  optional string soundcloudToken = 30;
}
message ServerQuery {
  optional IsConnectedQuery isConnectedQuery = 1;
  optional CurrentConfigQuery currentConfigQuery = 2;
  message IsConnectedQuery {
    required string objectId = 1;
  }
  message CurrentConfigQuery {
    required string interactiveId = 1;
  }
}
enum VReturnCode {
  OK = 1;
  ERROR = 2;
  TIMEOUT = 3;
  TERMINATED = 4;
  CANCELLED = 5;
  BUSY = 6;
  BAD_INTERACTIVEID = 7;
  SCHEDULE_EVENT = 8;
  NOT_CONNECTED = 9;
}
enum CommandType {
  TELNET_ON = 1;
  TELNET_OFF = 2;
  LOG_ON = 10;
  LOG_OFF = 11;
  LOG_REMOTE_ON = 12;
  LOG_REMOTE_OFF = 13;
  SYSTEM_REBOOT = 20;
}
